use serde::{Deserialize, Serialize};
use std::collections::HashMap;

#[derive(Serialize, Deserialize, Debug)]
pub struct MatchReferenceDto {
    pub gameId: u64,
    role: String,
    season: u32,
    platformId: String,
    champion: u32,
    pub queue: u64,
    lane: String,
    timestamp: u128,
}

#[derive(Serialize, Deserialize, Debug)]
pub struct MatchHistory {
    pub matches: Vec<MatchReferenceDto>,
}

#[derive(Serialize, Deserialize, Debug)]
struct TeamBans {
    championId: i32,
    pickTurn: u16,
}
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct PlayerDto {
    profileIcon: u32,
    accountId: String,
    matchHistoryUri: String,
    pub currentAccountId: String,
    currentPlatformId: String,
    summonerName: String,
    summonerId: String,
    platformId: String,
}
#[derive(Serialize, Deserialize, Debug)]
pub struct ParticipantIdDto {
    participantId: i32,
    pub player: PlayerDto,
}

#[derive(Serialize, Deserialize, Debug)]
pub struct ParticipantStatsDto {
    item0: i32,
    item2: i32,
    totalUnitsHealed: u32,
    item1: i32,
    largestMultiKill: u16,
    goldEarned: u32,
    physicalDamageTaken: u64,
    totalPlayerScore: u32,
    champLevel: u32,
    damageDealtToObjectives: u64,
    totalDamageTaken: u64,
    neutralMinionsKilled: i32,
    deaths: i32,
    tripleKills: u16,
    magicDamageDealtToChampions: u64,
    wardsKilled: i32,
    pentaKills: u16,
    damageSelfMitigated: u64,
    largestCriticalStrike: u32,
    totalTimeCrowdControlDealt: u32,
    magicDamageDealt: u64,
    totalScoreRank: u32,
    wardsPlaced: i32,
    totalDamageDealt: u64,
    timeCCingOthers: u64,
    magicalDamageTaken: u64,
    largestKillingSpree: u32,
    totalDamageDealtToChampions: u64,
    physicalDamageDealtToChampions: u64,
    neutralMinionsKilledTeamJungle: i32,
    totalMinionsKilled: i32,
    visionWardsBoughtInGame: i32,
    objectivePlayerScore: u32,
    kills: i32,
    combatPlayerScore: u32,
    inhibitorKills: u16,
    turretKills: u16,
    participantId: i32,
    trueDamageTaken: u64,
    assists: i32,
    goldSpent: u32,
    damageDealtToTurrets: u64,
    win: bool,
    totalHeal: u64,
    unrealKills: i32,
    visionScore: u64,
    physicalDamageDealt: u64,
    longestTimeSpentLiving: u32,
    killingSprees: i32,
    sightWardsBoughtInGame: i32,
    trueDamageDealtToChampions: u64,
    neutralMinionsKilledEnemyJungle: i32,
    doubleKills: u16,
    trueDamageDealt: u64,
    quadraKills: u16,
    item4: i32,
    item3: i32,
    item6: i32,
    item5: i32,
    playerScore0: u32,
    playerScore1: u32,
    playerScore2: u32,
    playerScore3: u32,
    playerScore4: u32,
    playerScore5: u32,
    playerScore6: u32,
    playerScore7: u32,
    playerScore8: u32,
    playerScore9: u32,
    perk0: i32,
    perk0Var1: u16,
    perk0Var2: u16,
    perk0Var3: u16,
    perk1: i32,
    perk1Var1: u16,
    perk1Var2: u16,
    perk1Var3: u16,
    perk2: i32,
    perk2Var1: u16,
    perk2Var2: u16,
    perk2Var3: u16,
    perk3: i32,
    perk3Var1: u16,
    perk3Var2: u16,
    perk3Var3: u16,
    perk4: i32,
    perk4Var1: u16,
    perk4Var2: u16,
    perk4Var3: u16,
    perk5: i32,
    perk5Var1: u16,
    perk5Var2: u16,
    perk5Var3: u16,
    perkPrimaryStyle: u16,
    perkSubStyle: u16,
    statPerk0: u16,
    statPerk1: u16,
    statPerk2: u16,
}
#[derive(Serialize, Deserialize, Debug)]
pub struct ParticipantTimelineDto {
    participantId: i32,
    csDiffPerMinDeltas: HashMap<String, f64>,
    damageTakenPerMinDeltas: HashMap<String, f64>,
    pub role: String,
    damageTakenDiffPerMinDeltas: HashMap<String, f64>,
    xpPerMinDeltas: HashMap<String, f64>,
    xpDiffPerMinDeltas: HashMap<String, f64>,
    pub lane: String,
    creepsPerMinDeltas: HashMap<String, f64>,
    goldPerMinDeltas: HashMap<String, f64>,
}
#[derive(Serialize, Deserialize, Debug)]
pub struct ParticipantDto {
    participantId: u32,
    championId: i32,
    stats: ParticipantStatsDto,
    teamId: u16,
    spell1Id: u16,
    spell2Id: u16,
}
#[derive(Serialize, Deserialize, Debug)]
pub struct TeamStats {
    towerKills: i32,
    riftHeraldKills: i32,
    firstBlood: bool,
    inhibitorKills: i32,
    bans: Vec<TeamBans>,
    firstBaron: bool,
    firstDragon: bool,
    dominionVictoryScore: i32,
    dragonKills: u16,
    baronKills: u16,
    firstInhibitor: bool,
    firstTower: bool,
    vilemawKills: u16,
    firstRiftHerald: bool,
    teamId: u16,
    win: String,
}

#[derive(Serialize, Deserialize, Debug)]
pub struct Match {
    pub gameId: u64,
    pub participantIdentities: Vec<ParticipantIdDto>,
    pub queueId: i32,
    pub gameType: String,
    gameDuration: u64,
    teams: Vec<TeamStats>,
    platformId: String,
    gameCreation: u64,
    seasonId: i32,
    gameVersion: String,
    mapId: i32,
    gameMode: String,
    pub participants: Vec<ParticipantDto>,
}
